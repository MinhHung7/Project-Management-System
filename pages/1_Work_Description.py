import streamlit as st
import pandas as pd
from io import BytesIO

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title='Work Description', page_icon='', layout='wide')

# Function to clear cache before running
def clear_cache():
    # For Streamlit versions 1.14 and later
    try:
        st.cache_resource.clear()
    except AttributeError:
        pass  # st.cache_data may not be available in older versions

# G·ªçi h√†m x√≥a cache tr∆∞·ªõc khi t·∫£i file ho·∫∑c x·ª≠ l√Ω
clear_cache()

# Ki·ªÉm tra tr·∫°ng th√°i c·ªßa file ƒë√£ t·∫£i l√™n
if 'uploaded_file' not in st.session_state:
    st.session_state.uploaded_file = None

if 'uploaded_button' not in st.session_state:
    st.session_state.uploaded_button = None

if 'work_create_button' not in st.session_state:
    st.session_state.work_create_button = None

if 'work_update_button' not in st.session_state:
    st.session_state.work_update_button = None

with st.container(border=True):
    col1, col2 = st.columns(2)
    col1_expander = col1.expander("Upload your work description")
    with col1_expander:
        st.write("Allows users to upload a CSV file containing pre-prepared work description data, enabling quick import and display of information for management.")
        uploaded_button = col1_expander.button("Confirm upload")
    
    col2_expander = col2.expander("Create your work description")
    with col2_expander:
        st.write("Allows users to create a new work description directly on the application interface, entering each field and building the data table from scratch.")
        work_create_button = col2_expander.button("Confirm create")

# Hi·ªÉn th·ªã n√∫t upload v√† x·ª≠ l√Ω tr·∫°ng th√°i
if uploaded_button or st.session_state.uploaded_button is not None:
    uploaded_button = True
    st.session_state.uploaded_button = uploaded_button

    uploaded_file = st.file_uploader("Choose a CSV file", type=["csv"])

    # Ki·ªÉm tra n·∫øu file ƒë∆∞·ª£c t·∫£i l√™n
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write(f"Uploaded file: {uploaded_file.name}")
        st.session_state.uploaded_file = df
        st.session_state.uploaded_button = None  # Reset button state after uploading

if work_create_button or st.session_state.work_create_button is not None:
    # Form input
    st.session_state.work_create_button = work_create_button

    with st.form(key='work_description_form'):
        # C√¥ng vi·ªác
        task = st.text_area("C√¥ng vi·ªác")

        # Chi ti·∫øt c√¥ng vi·ªác
        job_details = st.text_area("Chi ti·∫øt c√¥ng vi·ªác")
        
        # Ng∆∞·ªùi th·ª±c hi·ªán
        person_in_charge = st.text_input("Ng∆∞·ªùi th·ª±c hi·ªán")
        
        # Deadlines
        deadline = st.date_input("Deadlines", min_value=pd.to_datetime("today").date())
        
        # Ghi ch√∫
        notes = st.text_area("Ghi ch√∫")
        
        # ∆Øu ti√™n
        priority = st.selectbox("∆Øu ti√™n", ["Th·∫•p", "Trung b√¨nh", "Cao"])
        
        # K·∫øt qu·∫£ mong ƒë·ª£i
        expected_result = st.text_area("K·∫øt qu·∫£ mong ƒë·ª£i")
        
        # Submit button
        submit_button = st.form_submit_button(label="Submit")
    
    # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n submit
    if submit_button:
        ####################################################
        # C·∫≠p nh·∫≠t data
        if st.session_state.uploaded_file is None:
            df = pd.DataFrame(columns=[
                "C√¥ng vi·ªác",
                "Chi ti·∫øt c√¥ng vi·ªác",
                "Ng∆∞·ªùi th·ª±c hi·ªán",
                "Ti·∫øn ƒë·ªô (%)",
                "Ng√†y b·∫Øt ƒë·∫ßu",
                "Deadlines",
                "Ng√†y ho√†n th√†nh",
                "T√†i nguy√™n li√™n quan",
                "Ghi ch√∫",
                "∆Øu ti√™n",
                "Vai tr√≤",
                "R·ªßi ro, kh√≥ khƒÉn",
                "K·∫øt qu·∫£ mong ƒë·ª£i",
                "K·∫øt qu·∫£ th·ª±c t·∫ø",
                "ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng",
                "Ng∆∞·ªùi ph√™ duy·ªát", 
                "C√¥ng c·ª• s·ª≠ d·ª•ng",
                "T√†i li·ªáu tham chi·∫øu", 
            ])

        else:
            df = st.session_state.uploaded_file
        ##########################################
        # T·∫°o dictionary ƒë·ªÉ th√™m v√†o DataFrame
        new_data = {
            "C√¥ng vi·ªác": task,
            "Chi ti·∫øt c√¥ng vi·ªác": job_details,
            "Ng∆∞·ªùi th·ª±c hi·ªán": person_in_charge,
            "Ti·∫øn ƒë·ªô (%)": None,
            "Ng√†y b·∫Øt ƒë·∫ßu": None,
            "Deadlines": deadline,
            "Ng√†y ho√†n th√†nh": None,
            "T√†i nguy√™n li√™n quan": None,
            "Ghi ch√∫": notes,
            "∆Øu ti√™n": priority,
            "Vai tr√≤": None,
            "R·ªßi ro, kh√≥ khƒÉn": None,
            "K·∫øt qu·∫£ mong ƒë·ª£i": expected_result,
            "K·∫øt qu·∫£ th·ª±c t·∫ø": None,
            "ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng": None,
            "Ng∆∞·ªùi ph√™ duy·ªát": None,
            "C√¥ng c·ª• s·ª≠ d·ª•ng": None,
            "T√†i li·ªáu tham chi·∫øu": None,
        }

        # Th√™m d·ªØ li·ªáu v√†o DataFrame
        df = df.append(new_data, ignore_index=True)
        st.session_state.uploaded_file = df

        st.session_state.work_create_button = None
        st.dialog("Form has been successfully submitted!")

        # ·∫®n form sau khi submit
        st.rerun()


# Hi·ªÉn th·ªã DataFrame
if st.session_state.uploaded_file is not None:
    df = st.session_state.uploaded_file
    # Convert 'Ng√†y b·∫Øt ƒë·∫ßu' column to datetime format
    df['Ng√†y b·∫Øt ƒë·∫ßu'] = pd.to_datetime(df['Ng√†y b·∫Øt ƒë·∫ßu'], format='%Y-%m-%d')
    df['Deadlines'] = pd.to_datetime(df['Deadlines'], format='%Y-%m-%d')
    df['Ng√†y ho√†n th√†nh'] = pd.to_datetime(df['Ng√†y ho√†n th√†nh'], format='%Y-%m-%d')
    st.subheader("Your work descriptions (editable)")
    df = st.data_editor(df,
                   column_config={
                       "Ti·∫øn ƒë·ªô (%)": st.column_config.NumberColumn(format="%d %%", min_value=0, max_value=100, step=1),
                       "Ng√†y b·∫Øt ƒë·∫ßu": st.column_config.DateColumn(format="DD.MM.YYYY"),
                       "Deadlines": st.column_config.DateColumn(format="DD.MM.YYYY"),
                       "Ng√†y ho√†n th√†nh": st.column_config.DateColumn(format="DD.MM.YYYY"),
                       "∆Øu ti√™n": st.column_config.SelectboxColumn(options=["Cao", "Trung B√¨nh", "Th·∫•p"]),
                       "ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng": st.column_config.NumberColumn(format="%f ‚≠ê", min_value=0, max_value=10),
                       "T√†i li·ªáu tham chi·∫øu": st.column_config.LinkColumn(width="medium"),
                   })
    
    with st.expander("Overview of your work description (uneditable)"):
        text_df = st.table(df)

    st.session_state.uploaded_file = df

    # with st.popover("Edit", icon="üîÑ"):
    #     row_index = st.number_input("What's the task index? (Enter a number)", min_value=0, max_value=len(df)-1, step=1)
    #     work_edit_submit_button = st.button("Submit")

    # if row_index is not None and work_edit_submit_button:
    #     with st.expander(f"Edit Task {row_index}"):
    #         df.loc[row_index, 'Chi ti·∫øt c√¥ng vi·ªác'] = st.text_input("Chi ti·∫øt c√¥ng vi·ªác", df.loc[row_index, 'Chi ti·∫øt c√¥ng vi·ªác'])
    #         df.loc[row_index, 'Ng∆∞·ªùi th·ª±c hi·ªán'] = st.text_input("Ng∆∞·ªùi th·ª±c hi·ªán", df.loc[row_index, 'Ng∆∞·ªùi th·ª±c hi·ªán'])
    #         df.loc[row_index, 'Ti·∫øn ƒë·ªô (%)'] = st.number_input("Ti·∫øn ƒë·ªô (%)", min_value=0, max_value=100, value=df.loc[row_index, 'Ti·∫øn ƒë·ªô (%)'], step=1)
    #         df.loc[row_index, 'Ng√†y b·∫Øt ƒë·∫ßu'] = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", pd.to_datetime(df.loc[row_index, 'Ng√†y b·∫Øt ƒë·∫ßu']))
    #         df.loc[row_index, '∆Øu ti√™n'] = st.selectbox("∆Øu ti√™n", ['Cao', 'Trung B√¨nh', 'Th·∫•p'], index=['Cao', 'Trung B√¨nh', 'Th·∫•p'].index(df.loc[row_index, '∆Øu ti√™n']))

    #         if st.button("Edit Submit"):
    #             st.session_state.uploaded_file = df
    #             st.rerun()
# N√∫t Save
# L∆∞u t·ªáp CSV sau khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Save"
if st.session_state.uploaded_file is not None:
    temp_df = st.session_state.uploaded_file

    csv_data = temp_df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')

    st.download_button(
            label="Save",
            data=csv_data,
            file_name="project_management.csv",
            mime="text/csv"
        )
